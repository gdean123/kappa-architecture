/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package stream_processor;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class WordCountKey extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 5509281961847867047L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"WordCountKey\",\"namespace\":\"stream_processor\",\"fields\":[{\"name\":\"word\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public String word;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public WordCountKey() {}

  /**
   * All-args constructor.
   * @param word The new value for word
   */
  public WordCountKey(String word) {
    this.word = word;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public Object get(int field$) {
    switch (field$) {
    case 0: return word;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, Object value$) {
    switch (field$) {
    case 0: word = (String)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'word' field.
   * @return The value of the 'word' field.
   */
  public String getWord() {
    return word;
  }

  /**
   * Sets the value of the 'word' field.
   * @param value the value to set.
   */
  public void setWord(String value) {
    this.word = value;
  }

  /**
   * Creates a new WordCountKey RecordBuilder.
   * @return A new WordCountKey RecordBuilder
   */
  public static Builder newBuilder() {
    return new Builder();
  }

  /**
   * Creates a new WordCountKey RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new WordCountKey RecordBuilder
   */
  public static Builder newBuilder(Builder other) {
    return new Builder(other);
  }

  /**
   * Creates a new WordCountKey RecordBuilder by copying an existing WordCountKey instance.
   * @param other The existing instance to copy.
   * @return A new WordCountKey RecordBuilder
   */
  public static Builder newBuilder(WordCountKey other) {
    return new Builder(other);
  }

  /**
   * RecordBuilder for WordCountKey instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<WordCountKey>
    implements org.apache.avro.data.RecordBuilder<WordCountKey> {

    private String word;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.word)) {
        this.word = data().deepCopy(fields()[0].schema(), other.word);
        fieldSetFlags()[0] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing WordCountKey instance
     * @param other The existing instance to copy.
     */
    private Builder(WordCountKey other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.word)) {
        this.word = data().deepCopy(fields()[0].schema(), other.word);
        fieldSetFlags()[0] = true;
      }
    }

    /**
      * Gets the value of the 'word' field.
      * @return The value.
      */
    public String getWord() {
      return word;
    }

    /**
      * Sets the value of the 'word' field.
      * @param value The value of 'word'.
      * @return This builder.
      */
    public Builder setWord(String value) {
      validate(fields()[0], value);
      this.word = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'word' field has been set.
      * @return True if the 'word' field has been set, false otherwise.
      */
    public boolean hasWord() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'word' field.
      * @return This builder.
      */
    public Builder clearWord() {
      word = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    @Override
    public WordCountKey build() {
      try {
        WordCountKey record = new WordCountKey();
        record.word = fieldSetFlags()[0] ? this.word : (String) defaultValue(fields()[0]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
